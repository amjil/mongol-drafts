(ns mongol-drafts.widgets.draft
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [virtual-keyboard.keyboard :as keyboard]
   [virtual-keyboard.options :as keyboard-options]
   [mongol-drafts.widgets.button-bar :as button-bar]
   [mongol-drafts.widgets.drawer :as drawer]
   [cljd.flutter.alpha2 :as f]
   [mongol-drafts.widgets.search :as search]))

(defn widget []
  (f/widget
   :context ctx
   :managed [^m/TextEditingController text-controller (m/TextEditingController)
             ^m/TextEditingController tag-controller (m/TextEditingController)]
   :let [w  (-> m/MediaQuery (.of ctx) .-size .-width)
         h  (-> m/MediaQuery (.of ctx) .-size .-height)
         info (merge keyboard-options/keyboard-option {} {:width w})
         state (atom (merge keyboard-options/keyboard-state
                            {:tag-viewable false
                             :show-keyboard true
                             :show-stacked-keyboard false
                             :show-drawer-search false
                             :show-sub-drawer-search false
                             :show-search-diaglog true
                             :tag-on-edit false
                             :current-layout "mn"
                             :text-controller text-controller}))]
   :bind {:info info :state state
          :text-controller text-controller
          :tag-controller tag-controller}
   :watch [{:keys [tag-viewable
                   show-keyboard
                   show-stacked-keyboard
                   show-search-diaglog]}
           state]
   (m/Stack
    .children
    [(m/Scaffold
      .onDrawerChanged 
      (fn [c] 
        (if (false? c)
          (swap! state assoc :show-stacked-keyboard false)))
      .drawer (drawer/left-drawer)
      .body
      (m/SafeArea
       .child
       (m/Column
        .children
        [(button-bar/topbar)
         (m/Expanded
          .child
          (m/Row
           .children
           [(if (true? tag-viewable)
              (button-bar/tagbar tag-controller)
              (m/Container))
            (m/Expanded
             .child
             (m/Padding
              .padding (.all m/EdgeInsets 6)
              .child
              (mgl/MongolTextField
               .controller text-controller
               .onTap (fn []
                        (swap! state assoc :show-keyboard true)
                        (when (true? (:tag-on-edit @state))
                          (let [^m/TextEditingController controller (:text-controller @state)]
                            (.clear controller))
                          (swap! state assoc :tag-on-edit false))
                        (swap! state assoc :text-controller text-controller))
               .decoration nil
               .maxLines 1000
               .autofocus true
               .showCursor (if (true? show-keyboard) true false)
               .readOnly true
               .style (m/TextStyle .fontSize 20))))
            (if (true? show-keyboard)
              (button-bar/toolbar)
              (m/Container))]))
         (if (true? show-keyboard)
           (m/Container
            .color (-> m/Colors .blue .-shade100)
            .child
            (keyboard/keyboard))
           (m/Container))])))
     (if (true? show-stacked-keyboard)
       (m/Positioned
        .bottom 0
        .left 0
        .right 0
        .child
        (m/IntrinsicHeight
         .child
        (m/Container
         .color (-> m/Colors .blue .-shade100)
         .child
         (m/SafeArea
          .top false
          .child
          (m/Column 
           .children 
           [(button-bar/keyboard-upper-bar)
            (keyboard/keyboard)])
          ))))
       (m/Container))
     (if (true? show-search-diaglog)
       (search/widget)
       (m/Container))])))
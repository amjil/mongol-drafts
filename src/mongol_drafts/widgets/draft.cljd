(ns mongol-drafts.widgets.draft
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [virtual-keyboard.keyboard :as keyboard]
   [virtual-keyboard.keyboard-action :as keyboard-action]
   [virtual-keyboard.options :as keyboard-options]
   [mongol-drafts.widgets.button-bar :as button-bar]
   [mongol-drafts.widgets.drawer :as drawer]
   [cljd.flutter.alpha2 :as f]
   [mongol-drafts.widgets.search :as search]
   [mongol-drafts.widgets.tagbar :as tagbar]
   [mongol-drafts.states.draft :as draft-state]
   [menu-bar.menu :as menu]
   [mongol-drafts.states.history :as his-state]))

(defn widget []
  (f/widget
   :context ctx
   :managed [^m/TextEditingController text-controller (m/TextEditingController)
             ^m/TextEditingController tag-controller (m/TextEditingController)
             ^m/TextEditingController search-controller (m/TextEditingController)
             ^m/TextEditingController search-tag-controller (m/TextEditingController)]
   :let [w  (-> m/MediaQuery (.of ctx) .-size .-width)
         h  (-> m/MediaQuery (.of ctx) .-size .-height)
         info (merge keyboard-options/keyboard-option {} {:width w})
         state (atom (merge keyboard-options/keyboard-state
                            {:tag-viewable false
                             :show-keyboard false
                             :show-stacked-keyboard false
                             :show-drawer-search false
                             :show-sub-drawer-search false
                             :show-search-diaglog false
                             :tag-on-edit false
                             :current-layout "mn"
                             :tictoe true
                             :text-controller text-controller}))
         _ (draft-state/new-draft state)
         _ (his-state/init-history state text-controller)]
   :bind {:info info :state state
          :text-controller text-controller
          :tag-controller tag-controller
          :search-controller search-controller
          :search-tag-controller search-tag-controller}
   :watch [{:keys [tag-viewable
                   show-keyboard
                   show-stacked-keyboard
                   show-search-diaglog
                   candidates-list]}
           state]
   :bg-watcher ([^m/TextEditingValue {edit-text .-text} text-controller]
                ;; filter other changed event, maybe selection change
                (if (true? (:tictoe @state))
                  ;; TextEditingController text changed
                  (do
                    (dart:core/print "nothing")
                    (swap! state assoc :tictoe false))
                  ;; TextEditingController text & selection change
                  (do
                    (dart:core/print "something")
                    (dart:core/print (str "selection = " (.-selection text-controller)))
                    (swap! state assoc :tictoe true)
                    (when (and (some? edit-text) (not= (:editor/content @state) edit-text))
                      (dart:core/print (str " content = " (:editor/content @state) " edit-text = " edit-text))
                      (swap! state assoc :editor/content edit-text)
                      (dart:core/print (str " end = " " his-flag = " (:history/flag @state)))

                      (let [id (get (:draft @state) "id")]
                        (when (and (not (empty? edit-text))
                                   (true? (:history/flag @state)))
                          (dart:core/print "history >>")
                          (his-state/push-history state edit-text text-controller))
                        (draft-state/update-draft state id edit-text))
                      ;; check this is redo/undo event
                      (when (false? (:history/flag @state))
                        (swap! state assoc :history/flag false))))))
                
   (m/Stack
    .children
    [(m/Scaffold
      .onDrawerChanged
      (fn [c]
        (if (false? c)
          (swap! state assoc :show-stacked-keyboard false)
          (do
            (swap! state assoc-in [:drafts :is-end] false)
            (swap! state assoc-in [:drafts :contents] [])
            (swap! state assoc :candidates-list [])
            (draft-state/query-drafts state (:draft-search @state) true)
            (dart:core/print "onDrawerChanged"))))
      .drawer (drawer/left-drawer)
      .body
      (m/SafeArea
       .child
       (m/Column
        .children
        [(button-bar/topbar)
         (m/Expanded
          .child
          (m/Row
           .children
           [(if (true? tag-viewable)
              (tagbar/tagbar tag-controller)
              (m/Container))
            (m/Expanded
             .child
             (m/Padding
              .padding (.all m/EdgeInsets 6)
              .child
              (mgl/MongolTextField
               .controller text-controller
               .onTap #(draft-state/focus-on-draft state text-controller)
               .decoration nil
               .maxLines 1000
               .autofocus true
               .showCursor (if (true? show-keyboard) true false)
               .readOnly true
               .style (m/TextStyle .fontSize 20))))
            (if (true? show-keyboard)
              (button-bar/toolbar)
              (m/Container))]))
         (if (true? show-keyboard)
           (m/Container
            .color (-> m/Colors .blue .-shade100)
            .child
            (keyboard/keyboard))
           (m/Container))])))
     (if (true? show-stacked-keyboard)
       (m/Positioned
        .bottom 0
        .left 0
        .right 0
        .child
        (m/IntrinsicHeight
         .child
         (m/Container
          .color (-> m/Colors .blue .-shade100)
          .child
          (m/SafeArea
           .top false
           .child
           (m/Column
            .children
            [(button-bar/keyboard-upper-bar)
             (keyboard/keyboard)])))))
       (m/Container))
     (if (true? show-search-diaglog)
       (search/widget)
       (m/Container))
     (m/Positioned
      .bottom (+ keyboard-options/keyboard-default-height 20 (* 4 (+ 4 (:row-vertical-padding info))))
      .right (/ w 4)
      .child
      (menu/menu {:bar {:elavation 10}
                  :item {:on-tap (fn [x] (keyboard-action/on-candidates-clicked text-controller x state))}}
                 candidates-list))])))
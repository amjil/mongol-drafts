(ns mongol-drafts.widgets.button-bar
  (:require
   ["package:flutter/material.dart" :as m]
   [cljd.flutter.alpha2 :as f]
   [mongol-drafts.states.global :as global-state]
   [mongol-drafts.states.draft :as draft-state]
   [mongol-drafts.states.tag :as tag-state]
   [mongol-drafts.states.history :as his-state]
   [mongol-drafts.states.selection :as selection-state]
   [virtual-keyboard.keyboard-action :as keyboard-action]))
   
(defn bar-button [child on-press]
  (m/Material
   .child
   (m/InkWell
    .onTap on-press
    .child child)))

(defn topbar []
  (f/widget
   :context ctx
   :get [:info
         :text-controller :search-controller]
   :watch [{char-count :editor/chars
            word-count :editor/words}
           global-state/state]
   (m/Row
    .mainAxisAlignment m.MainAxisAlignment/spaceAround
    .children
    [(bar-button
      (m/Icon (.article_outlined m/Icons))
      (fn []
        (-> m/Scaffold (.of ctx) (.openDrawer))))
     (bar-button
      (m/Icon (.add m/Icons))
      (fn []
        (dart:core/print "abc new draft")
        (swap! global-state/state assoc :edit-watcher/lock 2)
        (draft-state/new-draft global-state/state text-controller)
        (draft-state/focus-on-draft global-state/state text-controller)
        (swap! global-state/state assoc :edit-watcher/lock 1)))
     (bar-button
      (m/Icon (.sell_outlined m/Icons))
      (fn []
        (swap! global-state/state
               assoc
               :tag-viewable
               (not (:tag-viewable @global-state/state)))
        (tag-state/get-draft-tags global-state/state (-> @global-state/state :draft (get "id")))
        (when (false? (:tag-viewable @global-state/state))
          (swap! global-state/state
                 assoc
                 :text-controller
                 text-controller))))
     (m/SizedBox .width 20)
     (m/Text
      (str char-count "c" word-count "w"))
     (bar-button
      (m/Icon (.arrow_drop_down m/Icons))
      (fn [] nil))
     (bar-button
      (m/Icon (.search m/Icons))
      (fn []
        (swap! global-state/state assoc :show-search-diaglog true)
        (swap! global-state/state assoc :show-stacked-keyboard true)
        (swap! global-state/state assoc :show-keyboard false)
        (let [^m/TextEditingController controller search-controller]
          (.clear controller))))
     (m/Icon (.view_sidebar_outlined m/Icons))])))



(defn keyboard-close-button [flag]
  (f/widget
   (m/Container
    .height 40
    .child
    (m/GestureDetector
     .child (m/Icon (.keyboard_arrow_down m/Icons))
     .onTap (fn []
              (if (true? flag)
                (swap! global-state/state
                       assoc
                       :show-keyboard
                       (not (:show-keyboard @global-state/state)))
                (swap! global-state/state
                       assoc
                       :show-stacked-keyboard
                       (not (:show-stacked-keyboard @global-state/state)))))))))



;;;
(defn keyboard-upper-bar []
  (m/Expanded
   .child
   (m/Row
    .children
    [(keyboard-close-button false)])))


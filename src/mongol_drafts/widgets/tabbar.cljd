(ns mongol-drafts.widgets.tabbar
  (:require
   ["package:flutter/material.dart" :as m]
   [cljd.flutter.alpha2 :as f]
   [mongol-drafts.widgets.list :as content-list]
   [mongol-drafts.states.global :as global-state]
   [mongol-drafts.states.draft :as draft-state]))

(declare tabbar-view)

(defn tabbar []
  (f/widget
   :context ctx
   (m/DefaultTabController
    .length 4
    .child
    (m/Builder
     .builder
     (fn [^m/BuildContext context]
       (let [tab-controller (.of m/DefaultTabController context)
             _ (.addListener tab-controller
                             (fn []
                               (when-not (.-indexIsChanging tab-controller)
                                 (draft-state/set-draft-search-status global-state/state (.-index tab-controller)))))]
         (m/Column
          .children
          [(m/Row
            .children
            [(m/Expanded
              .child
              (m/TabBar
               .indicator (m/BoxDecoration
                           .borderRadius (.vertical m/BorderRadius
                                                    .bottom m.Radius/zero
                                                    .top (.circular m/Radius 10))
                           .color (-> m/Theme (.of ctx) .-colorScheme .-primaryContainer))
               .onTap (fn [i]
                        (draft-state/set-draft-search-status global-state/state i))
               .tabs
               [(m/Tab
                 .icon
                 (m/Icon (.inbox_outlined m/Icons)
                         .color (-> m/Theme (.of ctx) .-iconTheme .-color)))
                (m/Tab
                 .icon
                 (m/Icon (.flag_outlined m/Icons)
                         .color (-> m/Theme (.of ctx) .-iconTheme .-color)))
                (m/Tab
                 .icon
                 (m/Icon (.archive_outlined m/Icons)
                         .color (-> m/Theme (.of ctx) .-iconTheme .-color)))
        ;;    (m/Container
        ;;     ;; .margin (.only m/EdgeInsets .left 10)
        ;;     .child
        ;;     (m/Tab
        ;;      .child
        ;;      (m/Text "All"
        ;;              .style (m/TextStyle .color (-> m/Colors .blue .-shade600)))))
                (m/Tab
                 .icon
                 (m/Icon (.delete_outlined m/Icons)
                         .color (-> m/Theme (.of ctx) .-iconTheme .-color)))]))])

           (m/Expanded
            .child
            (tabbar-view))])))))))

(defn tabbar-view []
  (f/widget
   :context ctx
   (m/Container
    .color
    (-> m/Theme (.of ctx) .-colorScheme .-primaryContainer)
    .child
    (m/TabBarView
     .children
     [(content-list/widget)
      (content-list/widget)
      (content-list/widget)
      (content-list/widget)]))))

;;
(defn tab-content-view []
  nil)

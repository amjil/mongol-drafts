(ns mongol-drafts.states.draft
  (:require
   ["package:flutter/material.dart" :as m]
   [mongol-drafts.services.draft :as draft-service]
   [mongol-drafts.states.global :as global-state]
   [mongol-drafts.states.history :as his-state]
   [mongol-drafts.states.counter :as counter-state]))

(defn set-current-draft [state id]
  (let [result (await (draft-service/get-draft id))
        ^m/TextEditingController
        controller (:keyboard/text-controller @state)]
    ;; Set :edit-watcher/lock false to prevent when (set! (.-text controller) ....)
    ;; to fire :bg-watcher [text-controller]
    (swap! state assoc :draft (into {} (-> result first)))
    (set! (.-text controller) (get (:draft @state) "content"))
    (counter-state/count-contents state (get (:draft @state) "content"))
    (his-state/init-history state controller)))

(defn new-draft [state controller]
  ;; some initial states & function althogh here
  (when (nil? (:keyboard/text-controller @state))
    (swap! global-state/state assoc :keyboard/text-controller controller))
  ;;;;;;;;
  (let [result (await (draft-service/last-draft))
        content (-> result first (get "content"))
        ^m/TextEditingController
        controller (:keyboard/text-controller @state)]
    (cond
      (and (empty? content) (number? (-> result first (get "id"))))
      (do
        (swap! state assoc :draft
               (into {} (-> result last)))
        (if-not (empty? (.-text controller))
          (.clear controller)))

      :else
      (let [id (await (draft-service/create-draft ""))
            result (-> (draft-service/last-draft) await last)]
        (swap! state assoc :draft (into {} result))
        (.clear controller)))))

(defn delete-draft [state i]
  (let [id (-> @state :drafts :contents (nth i) (get "draft_id"))]
    (draft-service/delete-draft id)
    (swap! state assoc-in [:drafts :contents]
           (remove #(= id (get % "draft_id"))
                   (get-in @state [:drafts :contents])))))

(defn update-draft [state id content]
  (let [result (await (draft-service/update-draft id content))
        draft (:draft @state)]
    (swap! state assoc-in [:draft "content"] content)
    (counter-state/count-contents state content)))

(defn list-drafts [state]
  (let [;num (-> @state :drafts :contents count)
        flag (:draft/flag @state)
        status (:draft/status @state)
        drafts (await (draft-service/list-drafts
                       num [] [] flag status))]
    (if (empty? drafts)
      (do
        (swap! state assoc-in [:drafts :is-end] true)
        (swap! state assoc-in [:drafts :contents] []))
      (do
        (swap! state assoc-in [:drafts :is-end] false)
        (swap! state assoc-in [:drafts :contents]
               (concat (get-in @state [:drafts :contents]) drafts))))))

(defn query-drafts [state q has-filter]
  ;; has-filter false query without the tag filters
  ;;            true is query with the tag filters 
  (swap! state assoc :draft-search q)
  (if (empty? q)
    (let [;num (-> @state :draft :contents count)
          tag-in-ids (map #(get % "id") (:filter-tags @state))
          tag-out-ids (map #(get % "id") (:omitted-tags @state))
          flag (:draft/flag @state)
          status (:draft/status @state)
          drafts (await (draft-service/list-drafts
                         0
                         (if has-filter tag-in-ids [])
                         (if has-filter tag-out-ids [])
                         flag status))]
      (if (empty? drafts)
        (do
          (swap! state assoc-in [:drafts :is-end] true)
          (swap! state assoc-in [:drafts :contents] []))
        (do
          (swap! state assoc-in [:drafts :is-end] false)
          (swap! state assoc-in [:drafts :contents]
                 (into [] drafts)))))
    (let [;num (-> @state :draft :contents count)
          tag-in-ids (map #(get % "id") (:filter-tags @state))
          tag-out-ids (map #(get % "id") (:omitted-tags @state))
          flag (:draft/flag @state)
          status (:draft/status @state)
          drafts (await (draft-service/query-drafts
                         q
                         (if has-filter tag-in-ids [])
                         (if has-filter tag-out-ids [])
                         0 flag status))]
      (if (empty? drafts)
        (do
          (swap! state assoc-in [:drafts :is-end] true)
          (swap! state assoc-in [:drafts :contents] []))
        (do
          (swap! state assoc-in [:drafts :is-end] false)
          (swap! state assoc-in [:drafts :contents]
                 (into [] drafts)))))))

(defn clear-drafts [state]
  (swap! state assoc-in [:drafts :is-end] false)
  (swap! state assoc-in [:drafts :contents] []))

;;;;;
(defn focus-on-draft [state text-controller]
  (swap! state assoc :show-keyboard true)
  (when (true? (:tag-on-edit @state))
    (let [^m/TextEditingController controller (:keyboard/text-controller @state)]
      (.clear controller))
    (swap! state assoc :tag-on-edit false))
  (swap! state assoc :keyboard/text-controller text-controller)
  (when-not (empty? (:keyboard/candidates-list @state))
    (swap! state assoc :keyboard/candidates-list []))
  (swap! state assoc :edit-watcher/lock 1))

(defn draft-editing-listener [edit-text text-controller]
  ;; (if (true? (:edit-watcher/lock @state))
  (condp = (:edit-watcher/lock @global-state/state)
    ;; TextEditingController text changed
    ;; ----- Or The Open Other draft should't catch event.
    0
    (do
      (dart:core/print "nothing")
      (swap! global-state/state assoc :edit-watcher/lock 1))
    ;; TextEditingController text & selection change
    1
    (do
      (dart:core/print "The Change Event Is For Text")
      ;; (swap! state assoc :edit-watcher/lock 0)
      (when (and (some? edit-text) (not= (:editor/content @global-state/state) edit-text))
        ;; (dart:core/print (str " content = " (:editor/content @global-state/state) " edit-text = " edit-text))
        (swap! global-state/state assoc :editor/content edit-text)
        (dart:core/print (str " end = " " his-flag = " (:history/flag @global-state/state)))

        (let [id (get (:draft @global-state/state) "id")]
          (when (and (not (empty? edit-text))
                     (true? (:history/flag @global-state/state)))
            (dart:core/print "history >>")
            (his-state/push-history global-state/state edit-text text-controller))
          (update-draft global-state/state id edit-text))
        ;; check this is redo/undo event
        (when (false? (:history/flag @global-state/state))
          (swap! global-state/state assoc :history/flag false))))

    ;; else
    (dart:core/print "Do nothing")))

(defn initial-states [controller]
  {:tag-viewable false
   :show-keyboard false
   :show-stacked-keyboard false
   :show-drawer-search false
   :show-sub-drawer-search false
   :show-search-diaglog false
   :tag-on-edit false
   :current-layout "mn"
   :edit-watcher/lock 2
   :keyboard/text-controller controller})

(defn set-draft-search-status [state i]
  (when-not (= i (:draft/tabbar-index @state))
    (swap! state assoc :draft/tabbar-index i)
    (condp = i
      ;; Query Inbox drafts
      0
      (do
        (swap! state assoc :draft/flag nil)
        (swap! state assoc :draft/status 0)
        (query-drafts state (:draft-search @state) true))

      ;; Query Flaged drafts
      1
      (do
        (swap! state assoc :draft/flag 1)
        (swap! state assoc :draft/status 0)
        (query-drafts state (:draft-search @state) true))

      ;; Query Archived drafts
      2
      (do
        (swap! state assoc :draft/flag nil)
        (swap! state assoc :draft/status 1)
        (query-drafts state (:draft-search @state) true))

      ;; Query All drafts
      ;; 3
      ;; (do
      ;;   (swap! state assoc :draft/flag nil)
      ;;   (swap! state assoc :draft/status nil)
      ;;   (query-drafts state (:draft-search @state) true))

      ;; Query Deleted drafts
      3
      (do
        (swap! state assoc :draft/flag nil)
        (swap! state assoc :draft/status -1)
        (query-drafts state (:draft-search @state) true)))))

(defn toggle-draft-flag [state id]
  (let [flag (-> @state :draft (get "flag"))]
    (if (= 1 flag)
      (draft-service/unflag-draft id)
      (draft-service/flag-draft id))
    (swap! state assoc-in [:draft "flag"] (if (= 1 flag) 0 1))))

(defn toggle-drafts-item-flag [state i]
  (let [draft (-> @state :drafts :contents (nth i))]
    (if (= 1 (get draft "flag"))
      (do
        (draft-service/unflag-draft (get draft "draft_id"))
        (if (= 1 (:draft/tabbar-index @state))
          (swap! state assoc-in [:drafts :contents]
                 (remove #(= (get draft "draft_id") (get % "draft_id"))
                         (get-in @state [:drafts :contents])))
          (swap! state assoc-in [:drafts :contents i] (assoc (into {} draft) "flag" 0))))
      (do
        (draft-service/flag-draft (get draft "draft_id"))
        (swap! state assoc-in [:drafts :contents i] (assoc (into {} draft) "flag" 1))))))

(defn recycle-draft [state i]
  (let [id (-> @state :drafts :contents (nth i) (get "draft_id"))]
    (draft-service/recycle-draft id)
    (swap! state assoc-in [:drafts :contents]
           (remove #(= id (get % "draft_id"))
                   (get-in @state [:drafts :contents])))))

(defn archive-draft [state i]
  (let [id (-> @state :drafts :contents (nth i) (get "draft_id"))]
    (draft-service/archive-draft id)
    (swap! state assoc-in [:drafts :contents]
           (remove #(= id (get % "draft_id"))
                   (get-in @state [:drafts :contents])))))

(defn inbox-draft [state i]
  (let [id (-> @state :drafts :contents (nth i) (get "draft_id"))]
    (dart:core/print (str "draft = " (-> @state :drafts :contents (nth i))))
    (draft-service/inbox-draft id)
    (swap! state assoc-in [:drafts :contents]
           (remove #(= id (get % "draft_id"))
                   (get-in @state [:drafts :contents])))))


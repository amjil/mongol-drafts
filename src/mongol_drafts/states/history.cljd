(ns mongol-drafts.states.history
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:diff_match_patch/diff_match_patch.dart" :as diff-patch]))

;; History save diff patch match & Cursor position
;; (defn history-test []
;;   (let [dmp (diff-patch/DiffMatchPatch)
;;         patchs (.patch dmp "Hello World." "Goodbye World.")
;;         result (.patch_apply dmp patchs "Hello World.")]
;;     (dart:core/print (str "patchs = " patchs))
;;     (dart:core/print (str "result = " (first result)))))
(def max-history 50)

(defn init-history [state controller]
  (let [selection (.-selection controller)]
    (swap! state assoc :history/flag true)
    (swap! state assoc :history/num -1)
    (swap! state assoc :history/cursor -1)
    (swap! state assoc :history/selections [selection])
    (swap! state assoc :history/redo-patchs [])
    (swap! state assoc :history/undo-patchs [])))

(defn push-history [state new-content 
                    ^m/TextEditingController 
                    controller]
  (let [old-content (-> @state :draft (get "content"))
        dmp (diff-patch/DiffMatchPatch)
        redo-patch (.patch dmp old-content new-content)
        undo-patch (.patch dmp new-content old-content)
        ^m/TextSelection
        selection (.-selection controller)
        history-num (-> @state :history/num)]
    (dart:core/print (str "selection = " selection))
    (when-not (number? history-num)
      (swap! state assoc :history/num 0)
      (swap! state assoc :history/cursor 0))

    ;; From UNDO some position and PUSH History will
    ;;  Cut Off Histories.
    (when (not= (:history/num @state)
                (:history/cursor @state))
      (let [cursor (:history/cursor @state)]
        (swap! state update :history/selections #(take cursor %))
        (swap! state update :history/redo-patchs #(take cursor %))
        (swap! state update :history/undo-patchs #(take cursor %))
        (swap! state assoc :history/num cursor)))

    (when (= history-num max-history)
      (swap! state update :history/selections #(drop 1 %))
      (swap! state update :history/redo-patchs #(drop 1 %))
      (swap! state update :history/undo-patchs #(drop 1 %)))
    (swap! state update :history/selections #(concat % [selection]))
    (swap! state update :history/redo-patchs #(concat % [redo-patch]))
    (swap! state update :history/undo-patchs #(concat % [undo-patch]))
    (when-not (= history-num max-history)
      (swap! state update :history/num inc)
      (swap! state update :history/cursor inc))))

(defn redo [state 
            ^m/TextEditingController
            controller]
  (when (< (:history/cursor @state) (:history/num @state))
    (swap! state assoc :history/flag false)
    (let [patch (-> @state :history/redo-patchs (nth (inc (:history/cursor @state))))
          text (.-text controller)
          dmp (diff-patch/DiffMatchPatch)
          new-content (first (.patch_apply dmp patch text))]
      (set! (.-text controller) new-content))

    (let [^m/TextSelection
          selection (-> @state :history/selections (nth (+ 2 (:history/cursor @state))))]
      (set! (.-selection controller)
            (.copyWith selection
                       .baseOffset (.-start selection)
                       .extentOffset (.-end selection))))
    
    (swap! state update :history/cursor inc)))

(defn undo [state 
            ^m/TextEditingController
            controller]
  (when (>= (:history/cursor @state) 0)
    (swap! state assoc :history/flag false)
    (let [patch (-> @state :history/undo-patchs (nth (:history/cursor @state)))
          text (.-text controller)
          dmp (diff-patch/DiffMatchPatch)
          new-content (first (.patch_apply dmp patch text))]
      (dart:core/print (str "new-content = " new-content))
      (set! (.-text controller) new-content))

    (let [^m/TextSelection
          selection (-> @state :history/selections (nth (:history/cursor @state)))]
      (set! (.-selection controller)
            (.copyWith selection
                       .baseOffset (.-start selection)
                       .extentOffset (.-end selection))))

    (swap! state update :history/cursor dec)))
